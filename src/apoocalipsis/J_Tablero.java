/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package apoocalipsis;

import javax.swing.JOptionPane;

public class J_Tablero extends javax.swing.JFrame {
    private Juego juego, juegoAnterior;
    private ListaJuego arrayJuegos;
    private int turnoJuego;  // Vale de 0 al numero de supervivientes -1 dependiendo de que superviviente le toque
    private int turnosRestantesSuperviviente;
    
    private int estadoMover;
    private int estadoAtacar;
    private int estadoCambiarArma;
    private int estadoInfo;
    
    private Arma armaAux;
    
    private String [] listaNombres; // = {"Edward", "Manu", "Anass", "ChatGPT"};
    private Superviviente [] listaSup;
    
    /**
     * Creates new form Tablero
     */
    public J_Tablero(String [] nombres) {
        initComponents();
        juego = new Juego();
        juegoAnterior = new Juego();
        listaSup = new Superviviente[nombres.length];
        listaNombres = nombres;
    }
    
    public J_Tablero(Juego juego) {
        initComponents();
        this.juego = juego;
        listaSup = juego.getSupervivientesTodos();
        for (int i=0; i<listaSup.length; i++) {
            listaNombres[i] = listaSup[i].getNombre();
        }
    }
    
    public J_Tablero(String [] nombres, ListaJuego arrayJuegos) {
        this(nombres);
        this.arrayJuegos = arrayJuegos;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        L_LogoURJC = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        b00 = new javax.swing.JButton();
        b01 = new javax.swing.JButton();
        b02 = new javax.swing.JButton();
        b03 = new javax.swing.JButton();
        b04 = new javax.swing.JButton();
        b05 = new javax.swing.JButton();
        b06 = new javax.swing.JButton();
        b07 = new javax.swing.JButton();
        b08 = new javax.swing.JButton();
        b09 = new javax.swing.JButton();
        b10 = new javax.swing.JButton();
        b11 = new javax.swing.JButton();
        b12 = new javax.swing.JButton();
        b13 = new javax.swing.JButton();
        b14 = new javax.swing.JButton();
        b15 = new javax.swing.JButton();
        b16 = new javax.swing.JButton();
        b17 = new javax.swing.JButton();
        b18 = new javax.swing.JButton();
        b19 = new javax.swing.JButton();
        b20 = new javax.swing.JButton();
        b21 = new javax.swing.JButton();
        b22 = new javax.swing.JButton();
        b23 = new javax.swing.JButton();
        b24 = new javax.swing.JButton();
        b25 = new javax.swing.JButton();
        b26 = new javax.swing.JButton();
        b27 = new javax.swing.JButton();
        b28 = new javax.swing.JButton();
        b29 = new javax.swing.JButton();
        b30 = new javax.swing.JButton();
        b31 = new javax.swing.JButton();
        b32 = new javax.swing.JButton();
        b33 = new javax.swing.JButton();
        b34 = new javax.swing.JButton();
        b35 = new javax.swing.JButton();
        b36 = new javax.swing.JButton();
        b37 = new javax.swing.JButton();
        b38 = new javax.swing.JButton();
        b39 = new javax.swing.JButton();
        b40 = new javax.swing.JButton();
        b41 = new javax.swing.JButton();
        b42 = new javax.swing.JButton();
        b43 = new javax.swing.JButton();
        b44 = new javax.swing.JButton();
        b45 = new javax.swing.JButton();
        b46 = new javax.swing.JButton();
        b47 = new javax.swing.JButton();
        b48 = new javax.swing.JButton();
        b49 = new javax.swing.JButton();
        b50 = new javax.swing.JButton();
        b51 = new javax.swing.JButton();
        b52 = new javax.swing.JButton();
        b53 = new javax.swing.JButton();
        b54 = new javax.swing.JButton();
        b55 = new javax.swing.JButton();
        b56 = new javax.swing.JButton();
        b57 = new javax.swing.JButton();
        b58 = new javax.swing.JButton();
        b59 = new javax.swing.JButton();
        b60 = new javax.swing.JButton();
        b61 = new javax.swing.JButton();
        b62 = new javax.swing.JButton();
        b63 = new javax.swing.JButton();
        b64 = new javax.swing.JButton();
        b65 = new javax.swing.JButton();
        b66 = new javax.swing.JButton();
        b67 = new javax.swing.JButton();
        b68 = new javax.swing.JButton();
        b69 = new javax.swing.JButton();
        b70 = new javax.swing.JButton();
        b71 = new javax.swing.JButton();
        b72 = new javax.swing.JButton();
        b73 = new javax.swing.JButton();
        b74 = new javax.swing.JButton();
        b75 = new javax.swing.JButton();
        b76 = new javax.swing.JButton();
        b77 = new javax.swing.JButton();
        b78 = new javax.swing.JButton();
        b79 = new javax.swing.JButton();
        b80 = new javax.swing.JButton();
        b81 = new javax.swing.JButton();
        b82 = new javax.swing.JButton();
        b83 = new javax.swing.JButton();
        b84 = new javax.swing.JButton();
        b85 = new javax.swing.JButton();
        b86 = new javax.swing.JButton();
        b87 = new javax.swing.JButton();
        b88 = new javax.swing.JButton();
        b89 = new javax.swing.JButton();
        b90 = new javax.swing.JButton();
        b91 = new javax.swing.JButton();
        b92 = new javax.swing.JButton();
        b93 = new javax.swing.JButton();
        b94 = new javax.swing.JButton();
        b95 = new javax.swing.JButton();
        b96 = new javax.swing.JButton();
        b97 = new javax.swing.JButton();
        b98 = new javax.swing.JButton();
        b99 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        bNada = new javax.swing.JButton();
        bMoverse = new javax.swing.JButton();
        bAtaque = new javax.swing.JButton();
        bBuscarEquipo = new javax.swing.JButton();
        bCambiarArma = new javax.swing.JButton();
        bInfo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        nombreSuperviviente1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        estadoJuego = new javax.swing.JLabel();
        narradorJuego = new javax.swing.JLabel();
        P_MostrarInformacionSuperviviente = new javax.swing.JPanel();
        L_NombreSuperviviente = new javax.swing.JLabel();
        L_ManoIzquierda = new javax.swing.JLabel();
        L_ManoDerecha = new javax.swing.JLabel();
        L_Inventario = new javax.swing.JLabel();
        bManoIzq = new javax.swing.JButton();
        bManoDer = new javax.swing.JButton();
        bInv1 = new javax.swing.JButton();
        bInv2 = new javax.swing.JButton();
        bInv3 = new javax.swing.JButton();
        bInv4 = new javax.swing.JButton();
        bInv5 = new javax.swing.JButton();
        B_Salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(253, 253, 253));

        L_LogoURJC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/apoocalipsis/images/URJ_simbolo_POS_1.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(253, 253, 253));
        jPanel1.setLayout(new java.awt.GridLayout(10, 10, 10, 10));

        b00.setText("jButton1");
        b00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b00ActionPerformed(evt);
            }
        });
        jPanel1.add(b00);

        b01.setText("jButton7");
        b01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b01ActionPerformed(evt);
            }
        });
        jPanel1.add(b01);

        b02.setText("jButton6");
        b02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b02ActionPerformed(evt);
            }
        });
        jPanel1.add(b02);

        b03.setText("jButton2");
        b03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b03ActionPerformed(evt);
            }
        });
        jPanel1.add(b03);

        b04.setText("jButton4");
        b04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b04ActionPerformed(evt);
            }
        });
        jPanel1.add(b04);

        b05.setText("jButton10");
        b05.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b05ActionPerformed(evt);
            }
        });
        jPanel1.add(b05);

        b06.setText("jButton9");
        b06.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b06ActionPerformed(evt);
            }
        });
        jPanel1.add(b06);

        b07.setText("jButton13");
        b07.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b07ActionPerformed(evt);
            }
        });
        jPanel1.add(b07);

        b08.setText("jButton8");
        b08.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b08ActionPerformed(evt);
            }
        });
        jPanel1.add(b08);

        b09.setText("jButton1");
        b09.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b09ActionPerformed(evt);
            }
        });
        jPanel1.add(b09);

        b10.setText("jButton20");
        b10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b10ActionPerformed(evt);
            }
        });
        jPanel1.add(b10);

        b11.setText("jButton5");
        b11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b11ActionPerformed(evt);
            }
        });
        jPanel1.add(b11);

        b12.setText("jButton19");
        b12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b12ActionPerformed(evt);
            }
        });
        jPanel1.add(b12);

        b13.setText("jButton17");
        b13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b13ActionPerformed(evt);
            }
        });
        jPanel1.add(b13);

        b14.setText("jButton21");
        b14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b14ActionPerformed(evt);
            }
        });
        jPanel1.add(b14);

        b15.setText("jButton23");
        b15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b15ActionPerformed(evt);
            }
        });
        jPanel1.add(b15);

        b16.setText("jButton3");
        b16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b16ActionPerformed(evt);
            }
        });
        jPanel1.add(b16);

        b17.setText("jButton30");
        b17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b17ActionPerformed(evt);
            }
        });
        jPanel1.add(b17);

        b18.setText("jButton28");
        b18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b18ActionPerformed(evt);
            }
        });
        jPanel1.add(b18);

        b19.setText("jButton43");
        b19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b19ActionPerformed(evt);
            }
        });
        jPanel1.add(b19);

        b20.setText("jButton46");
        b20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b20ActionPerformed(evt);
            }
        });
        jPanel1.add(b20);

        b21.setText("jButton38");
        b21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b21ActionPerformed(evt);
            }
        });
        jPanel1.add(b21);

        b22.setText("jButton59");
        b22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b22ActionPerformed(evt);
            }
        });
        jPanel1.add(b22);

        b23.setText("jButton60");
        b23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b23ActionPerformed(evt);
            }
        });
        jPanel1.add(b23);

        b24.setText("jButton57");
        b24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b24ActionPerformed(evt);
            }
        });
        jPanel1.add(b24);

        b25.setText("jButton69");
        b25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b25ActionPerformed(evt);
            }
        });
        jPanel1.add(b25);

        b26.setText("jButton58");
        b26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b26ActionPerformed(evt);
            }
        });
        jPanel1.add(b26);

        b27.setText("jButton68");
        b27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b27ActionPerformed(evt);
            }
        });
        jPanel1.add(b27);

        b28.setText("jButton63");
        b28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b28ActionPerformed(evt);
            }
        });
        jPanel1.add(b28);

        b29.setText("jButton67");
        b29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b29ActionPerformed(evt);
            }
        });
        jPanel1.add(b29);

        b30.setText("jButton79");
        b30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b30ActionPerformed(evt);
            }
        });
        jPanel1.add(b30);

        b31.setText("jButton73");
        b31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b31ActionPerformed(evt);
            }
        });
        jPanel1.add(b31);

        b32.setText("jButton76");
        b32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b32ActionPerformed(evt);
            }
        });
        jPanel1.add(b32);

        b33.setText("jButton72");
        b33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b33ActionPerformed(evt);
            }
        });
        jPanel1.add(b33);

        b34.setText("jButton71");
        b34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b34ActionPerformed(evt);
            }
        });
        jPanel1.add(b34);

        b35.setText("jButton81");
        b35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b35ActionPerformed(evt);
            }
        });
        jPanel1.add(b35);

        b36.setText("jButton93");
        b36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b36ActionPerformed(evt);
            }
        });
        jPanel1.add(b36);

        b37.setText("jButton66");
        b37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b37ActionPerformed(evt);
            }
        });
        jPanel1.add(b37);

        b38.setText("jButton92");
        b38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b38ActionPerformed(evt);
            }
        });
        jPanel1.add(b38);

        b39.setText("jButton64");
        b39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b39ActionPerformed(evt);
            }
        });
        jPanel1.add(b39);

        b40.setText("jButton80");
        b40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b40ActionPerformed(evt);
            }
        });
        jPanel1.add(b40);

        b41.setText("jButton37");
        b41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b41ActionPerformed(evt);
            }
        });
        jPanel1.add(b41);

        b42.setText("jButton70");
        b42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b42ActionPerformed(evt);
            }
        });
        jPanel1.add(b42);

        b43.setText("jButton74");
        b43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b43ActionPerformed(evt);
            }
        });
        jPanel1.add(b43);

        b44.setText("jButton77");
        b44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b44ActionPerformed(evt);
            }
        });
        jPanel1.add(b44);

        b45.setText("jButton89");
        b45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b45ActionPerformed(evt);
            }
        });
        jPanel1.add(b45);

        b46.setText("jButton94");
        b46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b46ActionPerformed(evt);
            }
        });
        jPanel1.add(b46);

        b47.setText("jButton100");
        b47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b47ActionPerformed(evt);
            }
        });
        jPanel1.add(b47);

        b48.setText("jButton95");
        b48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b48ActionPerformed(evt);
            }
        });
        jPanel1.add(b48);

        b49.setText("jButton99");
        b49.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b49ActionPerformed(evt);
            }
        });
        jPanel1.add(b49);

        b50.setText("jButton98");
        b50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b50ActionPerformed(evt);
            }
        });
        jPanel1.add(b50);

        b51.setText("jButton75");
        b51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b51ActionPerformed(evt);
            }
        });
        jPanel1.add(b51);

        b52.setText("jButton82");
        b52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b52ActionPerformed(evt);
            }
        });
        jPanel1.add(b52);

        b53.setText("jButton61");
        b53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b53ActionPerformed(evt);
            }
        });
        jPanel1.add(b53);

        b54.setText("jButton54");
        b54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b54ActionPerformed(evt);
            }
        });
        jPanel1.add(b54);

        b55.setText("jButton56");
        b55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b55ActionPerformed(evt);
            }
        });
        jPanel1.add(b55);

        b56.setText("jButton36");
        b56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b56ActionPerformed(evt);
            }
        });
        jPanel1.add(b56);

        b57.setText("jButton50");
        b57.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b57ActionPerformed(evt);
            }
        });
        jPanel1.add(b57);

        b58.setText("jButton85");
        b58.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b58ActionPerformed(evt);
            }
        });
        jPanel1.add(b58);

        b59.setText("jButton78");
        b59.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b59ActionPerformed(evt);
            }
        });
        jPanel1.add(b59);

        b60.setText("jButton97");
        b60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b60ActionPerformed(evt);
            }
        });
        jPanel1.add(b60);

        b61.setText("jButton90");
        b61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b61ActionPerformed(evt);
            }
        });
        jPanel1.add(b61);

        b62.setText("jButton96");
        b62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b62ActionPerformed(evt);
            }
        });
        jPanel1.add(b62);

        b63.setText("jButton86");
        b63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b63ActionPerformed(evt);
            }
        });
        jPanel1.add(b63);

        b64.setText("jButton88");
        b64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b64ActionPerformed(evt);
            }
        });
        jPanel1.add(b64);

        b65.setText("jButton65");
        b65.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b65ActionPerformed(evt);
            }
        });
        jPanel1.add(b65);

        b66.setText("jButton91");
        b66.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b66ActionPerformed(evt);
            }
        });
        jPanel1.add(b66);

        b67.setText("jButton84");
        b67.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b67ActionPerformed(evt);
            }
        });
        jPanel1.add(b67);

        b68.setText("jButton62");
        b68.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b68ActionPerformed(evt);
            }
        });
        jPanel1.add(b68);

        b69.setText("jButton48");
        b69.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b69ActionPerformed(evt);
            }
        });
        jPanel1.add(b69);

        b70.setText("jButton32");
        b70.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b70ActionPerformed(evt);
            }
        });
        jPanel1.add(b70);

        b71.setText("jButton45");
        b71.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b71ActionPerformed(evt);
            }
        });
        jPanel1.add(b71);

        b72.setText("jButton55");
        b72.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b72ActionPerformed(evt);
            }
        });
        jPanel1.add(b72);

        b73.setText("jButton87");
        b73.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b73ActionPerformed(evt);
            }
        });
        jPanel1.add(b73);

        b74.setText("jButton52");
        b74.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b74ActionPerformed(evt);
            }
        });
        jPanel1.add(b74);

        b75.setText("jButton53");
        b75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b75ActionPerformed(evt);
            }
        });
        jPanel1.add(b75);

        b76.setText("jButton44");
        b76.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b76ActionPerformed(evt);
            }
        });
        jPanel1.add(b76);

        b77.setText("jButton51");
        b77.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b77ActionPerformed(evt);
            }
        });
        jPanel1.add(b77);

        b78.setText("jButton39");
        b78.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b78ActionPerformed(evt);
            }
        });
        jPanel1.add(b78);

        b79.setText("jButton83");
        b79.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b79ActionPerformed(evt);
            }
        });
        jPanel1.add(b79);

        b80.setText("jButton49");
        b80.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b80ActionPerformed(evt);
            }
        });
        jPanel1.add(b80);

        b81.setText("jButton12");
        b81.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b81ActionPerformed(evt);
            }
        });
        jPanel1.add(b81);

        b82.setText("jButton47");
        b82.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b82ActionPerformed(evt);
            }
        });
        jPanel1.add(b82);

        b83.setText("jButton25");
        b83.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b83ActionPerformed(evt);
            }
        });
        jPanel1.add(b83);

        b84.setText("jButton29");
        b84.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b84ActionPerformed(evt);
            }
        });
        jPanel1.add(b84);

        b85.setText("jButton24");
        b85.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b85ActionPerformed(evt);
            }
        });
        jPanel1.add(b85);

        b86.setText("jButton42");
        b86.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b86ActionPerformed(evt);
            }
        });
        jPanel1.add(b86);

        b87.setText("jButton40");
        b87.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b87ActionPerformed(evt);
            }
        });
        jPanel1.add(b87);

        b88.setText("jButton41");
        b88.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b88ActionPerformed(evt);
            }
        });
        jPanel1.add(b88);

        b89.setText("jButton27");
        b89.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b89ActionPerformed(evt);
            }
        });
        jPanel1.add(b89);

        b90.setText("jButton26");
        b90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b90ActionPerformed(evt);
            }
        });
        jPanel1.add(b90);

        b91.setText("jButton16");
        b91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b91ActionPerformed(evt);
            }
        });
        jPanel1.add(b91);

        b92.setText("jButton35");
        b92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b92ActionPerformed(evt);
            }
        });
        jPanel1.add(b92);

        b93.setText("jButton33");
        b93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b93ActionPerformed(evt);
            }
        });
        jPanel1.add(b93);

        b94.setText("jButton18");
        b94.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b94ActionPerformed(evt);
            }
        });
        jPanel1.add(b94);

        b95.setText("jButton14");
        b95.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b95ActionPerformed(evt);
            }
        });
        jPanel1.add(b95);

        b96.setText("jButton31");
        b96.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b96ActionPerformed(evt);
            }
        });
        jPanel1.add(b96);

        b97.setText("jButton34");
        b97.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b97ActionPerformed(evt);
            }
        });
        jPanel1.add(b97);

        b98.setText("jButton22");
        b98.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b98ActionPerformed(evt);
            }
        });
        jPanel1.add(b98);

        b99.setText("jButton11");
        b99.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b99ActionPerformed(evt);
            }
        });
        jPanel1.add(b99);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(7, 33, 68));
        jLabel1.setText("0");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(7, 33, 68));
        jLabel2.setText("1");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(7, 33, 68));
        jLabel3.setText("2");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(7, 33, 68));
        jLabel4.setText("3");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(7, 33, 68));
        jLabel5.setText("4");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(7, 33, 68));
        jLabel6.setText("5");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(7, 33, 68));
        jLabel7.setText("6");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(7, 33, 68));
        jLabel8.setText("7");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(7, 33, 68));
        jLabel9.setText("8");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(7, 33, 68));
        jLabel10.setText("9");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(7, 33, 68));
        jLabel21.setText("0");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(7, 33, 68));
        jLabel22.setText("1");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(7, 33, 68));
        jLabel23.setText("2");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(7, 33, 68));
        jLabel24.setText("3");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(7, 33, 68));
        jLabel25.setText("4");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(7, 33, 68));
        jLabel26.setText("5");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(7, 33, 68));
        jLabel27.setText("6");

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(7, 33, 68));
        jLabel28.setText("7");

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(7, 33, 68));
        jLabel29.setText("8");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(7, 33, 68));
        jLabel30.setText("9");

        bNada.setText("No hacer nada");
        bNada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNadaActionPerformed(evt);
            }
        });

        bMoverse.setText("Moverse");
        bMoverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMoverseActionPerformed(evt);
            }
        });

        bAtaque.setText("Atacar");
        bAtaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtaqueActionPerformed(evt);
            }
        });

        bBuscarEquipo.setText("Buscar equipo");
        bBuscarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarEquipoActionPerformed(evt);
            }
        });

        bCambiarArma.setText("Cambiar Arma");
        bCambiarArma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCambiarArmaActionPerformed(evt);
            }
        });

        bInfo.setText("Info en...");
        bInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(bNada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bMoverse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAtaque)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bBuscarEquipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCambiarArma)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInfo)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bNada, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bMoverse)
                    .addComponent(bAtaque)
                    .addComponent(bBuscarEquipo)
                    .addComponent(bCambiarArma)
                    .addComponent(bInfo))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        nombreSuperviviente1.setText("jLabel11");

        jLabel11.setText("Inventario");

        estadoJuego.setText("jLabel12");

        narradorJuego.setText("jLabel12");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(narradorJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(estadoJuego)
                    .addComponent(nombreSuperviviente1)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(nombreSuperviviente1)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(narradorJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estadoJuego)
                .addGap(134, 134, 134))
        );

        L_NombreSuperviviente.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        L_NombreSuperviviente.setForeground(new java.awt.Color(7, 33, 68));
        L_NombreSuperviviente.setText("NombreSuperviviente");

        L_ManoIzquierda.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        L_ManoIzquierda.setForeground(new java.awt.Color(7, 33, 68));
        L_ManoIzquierda.setText("Arma Mano Izq:");

        L_ManoDerecha.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        L_ManoDerecha.setForeground(new java.awt.Color(7, 33, 68));
        L_ManoDerecha.setText("Arma Mano Dcha:");

        L_Inventario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        L_Inventario.setForeground(new java.awt.Color(7, 33, 68));
        L_Inventario.setText("Inventario:");

        bManoIzq.setText("jButton1");
        bManoIzq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bManoIzqActionPerformed(evt);
            }
        });

        bManoDer.setText("jButton1");
        bManoDer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bManoDerActionPerformed(evt);
            }
        });

        bInv1.setText("jButton1");
        bInv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInv1ActionPerformed(evt);
            }
        });

        bInv2.setText("jButton2");
        bInv2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInv2ActionPerformed(evt);
            }
        });

        bInv3.setText("jButton3");
        bInv3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInv3ActionPerformed(evt);
            }
        });

        bInv4.setText("jButton4");
        bInv4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInv4ActionPerformed(evt);
            }
        });

        bInv5.setText("jButton5");
        bInv5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInv5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout P_MostrarInformacionSupervivienteLayout = new javax.swing.GroupLayout(P_MostrarInformacionSuperviviente);
        P_MostrarInformacionSuperviviente.setLayout(P_MostrarInformacionSupervivienteLayout);
        P_MostrarInformacionSupervivienteLayout.setHorizontalGroup(
            P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                .addGap(0, 154, Short.MAX_VALUE)
                .addComponent(L_NombreSuperviviente)
                .addGap(140, 140, 140))
            .addGroup(P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                .addGroup(P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                                .addComponent(L_ManoIzquierda)
                                .addGap(18, 18, 18)
                                .addComponent(bManoIzq))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                                .addComponent(L_ManoDerecha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bManoDer))))
                    .addGroup(P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bInv1)
                            .addComponent(L_Inventario)
                            .addComponent(bInv2)
                            .addComponent(bInv3)
                            .addComponent(bInv4)
                            .addComponent(bInv5))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        P_MostrarInformacionSupervivienteLayout.setVerticalGroup(
            P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                .addComponent(L_NombreSuperviviente, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(L_ManoDerecha))
                    .addGroup(P_MostrarInformacionSupervivienteLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(P_MostrarInformacionSupervivienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_ManoIzquierda)
                            .addComponent(bManoIzq))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bManoDer)))
                .addGap(144, 144, 144)
                .addComponent(L_Inventario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInv1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInv2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInv3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInv4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInv5)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(P_MostrarInformacionSuperviviente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(P_MostrarInformacionSuperviviente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        B_Salir.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        B_Salir.setForeground(new java.awt.Color(255, 51, 0));
        B_Salir.setText("SALIR");
        B_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_SalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel21)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel3)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel4)
                        .addGap(58, 58, 58)
                        .addComponent(jLabel5)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel6)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel7)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel8)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel9)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L_LogoURJC, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(B_Salir, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10))
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel22)
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel23)
                                        .addGap(33, 33, 33)
                                        .addComponent(jLabel24)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel25)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel26)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel27)
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel28)
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel29)
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel30)))))
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(B_Salir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(L_LogoURJC)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b00ActionPerformed
        Casilla c = juego.getCasilla(0,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b00ActionPerformed

    private void B_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_SalirActionPerformed
            // Mostrar un cuadro de confirmación
        int opcion = JOptionPane.showConfirmDialog(this, 
                                                    "¿Estás seguro de que quieres salir?", 
                                                    "Confirmar salida", 
                                                    JOptionPane.YES_NO_OPTION, 
                                                    JOptionPane.QUESTION_MESSAGE);

        // Si el usuario elige "Sí", cerrar el programa
        if (opcion == JOptionPane.YES_OPTION) {
            System.exit(0);
            arrayJuegos.guardarJuego(juegoAnterior);
        }
    }//GEN-LAST:event_B_SalirActionPerformed

    private void bNadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNadaActionPerformed
        actualizarPartida();
    }//GEN-LAST:event_bNadaActionPerformed

    private void bMoverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMoverseActionPerformed
        if (juego.buscarCasillaOrigen(listaSup[turnoJuego]).numeroZombis() + 1 > turnosRestantesSuperviviente) {
            narradorJuego.setText(listaNombres[turnoJuego] + "no puede escapar de los zombis");
        } else {
            estadoMover = 1;
            estadoAtacar = 0;
        }
    }//GEN-LAST:event_bMoverseActionPerformed

    private void b01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b01ActionPerformed
        Casilla c = juego.getCasilla(0,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b01ActionPerformed

    private void b02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b02ActionPerformed
        Casilla c = juego.getCasilla(0,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            }
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b02ActionPerformed

    private void bAtaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtaqueActionPerformed
        estadoAtacar = 1;
        estadoMover = 0;
        estadoCambiarArma = 0;
        estadoInfo = 0;
    }//GEN-LAST:event_bAtaqueActionPerformed

    private void bBuscarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarEquipoActionPerformed
        Equipo e = juego.buscarEquipo(listaSup[turnoJuego]);
        
        if (e == null) {
            narradorJuego.setText(listaNombres[turnoJuego] + " no ha encontrado ningun equipo");
        } else {
            narradorJuego.setText(listaNombres[turnoJuego] + " ha encontrado un(a) " + e.toString());
            actualizarPartida();
        }
    }//GEN-LAST:event_bBuscarEquipoActionPerformed

    private void bCambiarArmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCambiarArmaActionPerformed
        estadoAtacar = 0;
        estadoMover = 0;
        estadoCambiarArma = 1;
        estadoInfo = 0;
    }//GEN-LAST:event_bCambiarArmaActionPerformed

    private void bInv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInv1ActionPerformed
        if (estadoInfo == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 1) {
                Equipo e = listaSup[turnoJuego].getInventario()[0];
                mostrarPanelInfo("Posicion 1 Inventario", e.getInfo());
            } else {
                mostrarPanelInfo("Posicion 1 Inventario", "Hueco vacio");
            }
            estadoInfo = 0;
        } else if (estadoCambiarArma == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 1) {
                Equipo e = listaSup[turnoJuego].getInventario()[0];
                if (e instanceof Arma) {
                    estadoCambiarArma = 2;
                    armaAux = (Arma) e;
                    narradorJuego.setText(((Arma) e).toString() + " seleccionada");
                } else {
                    narradorJuego.setText("Eso no es un arma");
                }
            } else {
                narradorJuego.setText("Ese hueco esta vacio");
            }
        }
    }//GEN-LAST:event_bInv1ActionPerformed

    private void bInv2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInv2ActionPerformed
        if (estadoInfo == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 2) {
                Equipo e = listaSup[turnoJuego].getInventario()[1];
                mostrarPanelInfo("Posicion 2 Inventario", e.getInfo());
            } else {
                mostrarPanelInfo("Posicion 2 Inventario", "Hueco vacio");
            }
            estadoInfo = 0;
        } else if (estadoCambiarArma == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 2) {
                Equipo e = listaSup[turnoJuego].getInventario()[1];
                if (e instanceof Arma) {
                    estadoCambiarArma = 2;
                    armaAux = (Arma) e;
                    narradorJuego.setText(((Arma) e).toString() + " seleccionada");
                } else {
                    narradorJuego.setText("Eso no es un arma");
                }
            } else {
                narradorJuego.setText("Ese hueco esta vacio");
            }
        }
    }//GEN-LAST:event_bInv2ActionPerformed

    private void bInv3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInv3ActionPerformed
        if (estadoInfo == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 3) {
                Equipo e = listaSup[turnoJuego].getInventario()[2];
                mostrarPanelInfo("Posicion 3 Inventario", e.getInfo());
            } else {
                mostrarPanelInfo("Posicion 3 Inventario", "Hueco vacio");
            }
            estadoInfo = 0;
        } else if (estadoCambiarArma == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 3) {
                Equipo e = listaSup[turnoJuego].getInventario()[2];
                if (e instanceof Arma) {
                    estadoCambiarArma = 2;
                    armaAux = (Arma) e;
                    narradorJuego.setText(((Arma) e).toString() + " seleccionada");
                } else {
                    narradorJuego.setText("Eso no es un arma");
                }
            } else {
                narradorJuego.setText("Ese hueco esta vacio");
            }
        }
    }//GEN-LAST:event_bInv3ActionPerformed

    private void bInv4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInv4ActionPerformed
        if (estadoInfo == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 4) {
                Equipo e = listaSup[turnoJuego].getInventario()[3];
                mostrarPanelInfo("Posicion 4 Inventario", e.getInfo());
            } else {
                mostrarPanelInfo("Posicion 4 Inventario", "Hueco vacio");
            }
            estadoInfo = 0;
        } else if (estadoCambiarArma == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 4) {
                Equipo e = listaSup[turnoJuego].getInventario()[3];
                if (e instanceof Arma) {
                    estadoCambiarArma = 2;
                    armaAux = (Arma) e;
                    narradorJuego.setText(((Arma) e).toString() + " seleccionada");
                } else {
                    narradorJuego.setText("Eso no es un arma");
                }
            } else {
                narradorJuego.setText("Ese hueco esta vacio");
            }
        }
    }//GEN-LAST:event_bInv4ActionPerformed

    private void bInv5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInv5ActionPerformed
        if (estadoInfo == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 5) {
                Equipo e = listaSup[turnoJuego].getInventario()[4];
                mostrarPanelInfo("Posicion 5 Inventario", e.getInfo());
            } else {
                mostrarPanelInfo("Posicion 5 Inventario", "Hueco vacio");
            }
            estadoInfo = 0;
        } else if (estadoCambiarArma == 1) {
            if (listaSup[turnoJuego].getInvSig() >= 5) {
                Equipo e = listaSup[turnoJuego].getInventario()[4];
                if (e instanceof Arma) {
                    estadoCambiarArma = 2;
                    armaAux = (Arma) e;
                    narradorJuego.setText(((Arma) e).toString() + " seleccionada");
                } else {
                    narradorJuego.setText("Eso no es un arma");
                }
            } else {
                narradorJuego.setText("Ese hueco esta vacio");
            }
        }
    }//GEN-LAST:event_bInv5ActionPerformed

    private void bManoIzqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bManoIzqActionPerformed
        if (estadoCambiarArma == 2) {
            listaSup[turnoJuego].elegirArma(armaAux, true);
            actualizarPartida();
            estadoCambiarArma = 0;
            narradorJuego.setText(armaAux.toString() + " en mano izquierda");
        } else if (estadoAtacar == 1) {
            if (listaSup[turnoJuego].getManoIzq() != null) {
                armaAux = listaSup[turnoJuego].getManoIzq();
                estadoAtacar = 2;
                narradorJuego.setText(armaAux.toString() + " seleccionada para atacar");
            } else {
                narradorJuego.setText("No se puede elegir arma para atacar");
            }
        }
    }//GEN-LAST:event_bManoIzqActionPerformed

    private void bManoDerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bManoDerActionPerformed
        if (estadoCambiarArma == 2) {
            listaSup[turnoJuego].elegirArma(armaAux, false);
            actualizarPartida();
            estadoCambiarArma = 0;
            narradorJuego.setText(armaAux.toString() + " en mano derecha");
        } else if (estadoAtacar == 1) {
            if (listaSup[turnoJuego].getManoDer() != null) {
                armaAux = listaSup[turnoJuego].getManoDer();
                estadoAtacar = 2;
                narradorJuego.setText(armaAux.toString() + " seleccionada para atacar");
            } else {
                narradorJuego.setText("No se puede elegir arma para atacar");
            }
        }
    }//GEN-LAST:event_bManoDerActionPerformed

    private void bInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInfoActionPerformed
        estadoInfo = 1;
        estadoMover = 0;
        estadoAtacar = 0;
        estadoCambiarArma = 0;
    }//GEN-LAST:event_bInfoActionPerformed

    private void b03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b03ActionPerformed
        Casilla c = juego.getCasilla(0,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b03ActionPerformed

    private void b04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b04ActionPerformed
        Casilla c = juego.getCasilla(0,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b04ActionPerformed

    private void b05ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b05ActionPerformed
        Casilla c = juego.getCasilla(0,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b05ActionPerformed

    private void b06ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b06ActionPerformed
        Casilla c = juego.getCasilla(0,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b06ActionPerformed

    private void b07ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b07ActionPerformed
        Casilla c = juego.getCasilla(0,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b07ActionPerformed

    private void b08ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b08ActionPerformed
        Casilla c = juego.getCasilla(0,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b08ActionPerformed

    private void b09ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b09ActionPerformed
        Casilla c = juego.getCasilla(0,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b09ActionPerformed

    private void b10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b10ActionPerformed
        Casilla c = juego.getCasilla(1,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b10ActionPerformed

    private void b11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b11ActionPerformed
        Casilla c = juego.getCasilla(1,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b11ActionPerformed

    private void b12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b12ActionPerformed
        Casilla c = juego.getCasilla(1,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b12ActionPerformed

    private void b13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b13ActionPerformed
        Casilla c = juego.getCasilla(1,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b13ActionPerformed

    private void b14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b14ActionPerformed
        Casilla c = juego.getCasilla(1,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b14ActionPerformed

    private void b15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b15ActionPerformed
        Casilla c = juego.getCasilla(1,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b15ActionPerformed

    private void b16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b16ActionPerformed
        Casilla c = juego.getCasilla(1,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b16ActionPerformed

    private void b17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b17ActionPerformed
        Casilla c = juego.getCasilla(1,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b17ActionPerformed

    private void b18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b18ActionPerformed
        Casilla c = juego.getCasilla(1,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b18ActionPerformed

    private void b19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b19ActionPerformed
        Casilla c = juego.getCasilla(1,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b19ActionPerformed

    private void b20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b20ActionPerformed
        Casilla c = juego.getCasilla(2,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b20ActionPerformed

    private void b21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b21ActionPerformed
        Casilla c = juego.getCasilla(2,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b21ActionPerformed

    private void b22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b22ActionPerformed
        Casilla c = juego.getCasilla(2,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b22ActionPerformed

    private void b23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b23ActionPerformed
        Casilla c = juego.getCasilla(2,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b23ActionPerformed

    private void b24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b24ActionPerformed
        Casilla c = juego.getCasilla(2,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b24ActionPerformed

    private void b25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b25ActionPerformed
       Casilla c = juego.getCasilla(2,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b25ActionPerformed

    private void b26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b26ActionPerformed
      Casilla c = juego.getCasilla(2,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b26ActionPerformed

    private void b27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b27ActionPerformed
       Casilla c = juego.getCasilla(2,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b27ActionPerformed

    private void b28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b28ActionPerformed
      Casilla c = juego.getCasilla(2,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b28ActionPerformed

    private void b29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b29ActionPerformed
        Casilla c = juego.getCasilla(2,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b29ActionPerformed

    private void b30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b30ActionPerformed
        Casilla c = juego.getCasilla(3,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b30ActionPerformed

    private void b31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b31ActionPerformed
      Casilla c = juego.getCasilla(3,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b31ActionPerformed

    private void b32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b32ActionPerformed
        Casilla c = juego.getCasilla(3,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b32ActionPerformed

    private void b33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b33ActionPerformed
        Casilla c = juego.getCasilla(3,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b33ActionPerformed

    private void b34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b34ActionPerformed
        Casilla c = juego.getCasilla(3,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b34ActionPerformed

    private void b35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b35ActionPerformed
        Casilla c = juego.getCasilla(3,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b35ActionPerformed

    private void b36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b36ActionPerformed
        Casilla c = juego.getCasilla(3,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b36ActionPerformed

    private void b37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b37ActionPerformed
        Casilla c = juego.getCasilla(3,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b37ActionPerformed

    private void b38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b38ActionPerformed
        Casilla c = juego.getCasilla(3,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b38ActionPerformed

    private void b39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b39ActionPerformed
       Casilla c = juego.getCasilla(3,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b39ActionPerformed

    private void b40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b40ActionPerformed
        Casilla c = juego.getCasilla(4,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b40ActionPerformed

    private void b41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b41ActionPerformed
        Casilla c = juego.getCasilla(4,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b41ActionPerformed

    private void b42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b42ActionPerformed
       Casilla c = juego.getCasilla(4,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b42ActionPerformed

    private void b43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b43ActionPerformed
        Casilla c = juego.getCasilla(4,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b43ActionPerformed

    private void b44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b44ActionPerformed
       Casilla c = juego.getCasilla(4,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b44ActionPerformed

    private void b45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b45ActionPerformed
       Casilla c = juego.getCasilla(4,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b45ActionPerformed

    private void b46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b46ActionPerformed
       Casilla c = juego.getCasilla(4,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b46ActionPerformed

    private void b47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b47ActionPerformed
       Casilla c = juego.getCasilla(4,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b47ActionPerformed

    private void b48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b48ActionPerformed
     Casilla c = juego.getCasilla(4,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b48ActionPerformed

    private void b49ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b49ActionPerformed
      Casilla c = juego.getCasilla(4,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b49ActionPerformed

    private void b50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b50ActionPerformed
       Casilla c = juego.getCasilla(5,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b50ActionPerformed

    private void b51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b51ActionPerformed
      Casilla c = juego.getCasilla(5,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b51ActionPerformed

    private void b52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b52ActionPerformed
       Casilla c = juego.getCasilla(5,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b52ActionPerformed

    private void b53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b53ActionPerformed
        Casilla c = juego.getCasilla(5,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b53ActionPerformed

    private void b54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b54ActionPerformed
        Casilla c = juego.getCasilla(5,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b54ActionPerformed

    private void b55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b55ActionPerformed
        Casilla c = juego.getCasilla(5,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b55ActionPerformed

    private void b56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b56ActionPerformed
        Casilla c = juego.getCasilla(5,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b56ActionPerformed

    private void b57ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b57ActionPerformed
       Casilla c = juego.getCasilla(5,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b57ActionPerformed

    private void b58ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b58ActionPerformed
        Casilla c = juego.getCasilla(5,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b58ActionPerformed

    private void b59ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b59ActionPerformed
       Casilla c = juego.getCasilla(5,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b59ActionPerformed

    private void b60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b60ActionPerformed
       Casilla c = juego.getCasilla(6,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b60ActionPerformed

    private void b61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b61ActionPerformed
      Casilla c = juego.getCasilla(6,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b61ActionPerformed

    private void b62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b62ActionPerformed
      Casilla c = juego.getCasilla(6,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b62ActionPerformed

    private void b63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b63ActionPerformed
     Casilla c = juego.getCasilla(6,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b63ActionPerformed

    private void b64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b64ActionPerformed
       Casilla c = juego.getCasilla(6,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b64ActionPerformed

    private void b65ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b65ActionPerformed
        Casilla c = juego.getCasilla(6,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b65ActionPerformed

    private void b66ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b66ActionPerformed
        Casilla c = juego.getCasilla(6,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b66ActionPerformed

    private void b67ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b67ActionPerformed
       Casilla c = juego.getCasilla(6,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b67ActionPerformed

    private void b68ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b68ActionPerformed
       Casilla c = juego.getCasilla(6,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b68ActionPerformed

    private void b69ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b69ActionPerformed
    Casilla c = juego.getCasilla(6,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b69ActionPerformed

    private void b70ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b70ActionPerformed
      Casilla c = juego.getCasilla(7,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b70ActionPerformed

    private void b71ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b71ActionPerformed
       Casilla c = juego.getCasilla(7,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b71ActionPerformed

    private void b72ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b72ActionPerformed
        Casilla c = juego.getCasilla(7,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b72ActionPerformed

    private void b73ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b73ActionPerformed
        Casilla c = juego.getCasilla(7,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b73ActionPerformed

    private void b74ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b74ActionPerformed
       Casilla c = juego.getCasilla(7,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b74ActionPerformed

    private void b75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b75ActionPerformed
     Casilla c = juego.getCasilla(7,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b75ActionPerformed

    private void b76ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b76ActionPerformed
       Casilla c = juego.getCasilla(7,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b76ActionPerformed

    private void b77ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b77ActionPerformed
       Casilla c = juego.getCasilla(7,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b77ActionPerformed

    private void b78ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b78ActionPerformed
      Casilla c = juego.getCasilla(7,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b78ActionPerformed

    private void b79ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b79ActionPerformed
       Casilla c = juego.getCasilla(7,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b79ActionPerformed

    private void b80ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b80ActionPerformed
        Casilla c = juego.getCasilla(8,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b80ActionPerformed

    private void b81ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b81ActionPerformed
      Casilla c = juego.getCasilla(8,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b81ActionPerformed

    private void b82ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b82ActionPerformed
        Casilla c = juego.getCasilla(8,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b82ActionPerformed

    private void b83ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b83ActionPerformed
        Casilla c = juego.getCasilla(8,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b83ActionPerformed

    private void b84ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b84ActionPerformed
        Casilla c = juego.getCasilla(8,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b84ActionPerformed

    private void b85ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b85ActionPerformed
        Casilla c = juego.getCasilla(8,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b85ActionPerformed

    private void b86ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b86ActionPerformed
       Casilla c = juego.getCasilla(8,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b86ActionPerformed

    private void b87ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b87ActionPerformed
       Casilla c = juego.getCasilla(8,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b87ActionPerformed

    private void b88ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b88ActionPerformed
        Casilla c = juego.getCasilla(8,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b88ActionPerformed

    private void b89ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b89ActionPerformed
        Casilla c = juego.getCasilla(8,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b89ActionPerformed

    private void b90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b90ActionPerformed
        Casilla c = juego.getCasilla(9,0);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b90ActionPerformed

    private void b91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b91ActionPerformed
       Casilla c = juego.getCasilla(9,1);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b91ActionPerformed

    private void b92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b92ActionPerformed
       Casilla c = juego.getCasilla(9,2);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b92ActionPerformed

    private void b93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b93ActionPerformed
        Casilla c = juego.getCasilla(9,3);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b93ActionPerformed

    private void b94ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b94ActionPerformed
       Casilla c = juego.getCasilla(9,4);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b94ActionPerformed

    private void b95ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b95ActionPerformed
        Casilla c = juego.getCasilla(9,5);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b95ActionPerformed

    private void b96ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b96ActionPerformed
       Casilla c = juego.getCasilla(9,6);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b96ActionPerformed

    private void b97ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b97ActionPerformed
       Casilla c = juego.getCasilla(9,7);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b97ActionPerformed

    private void b98ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b98ActionPerformed
        Casilla c = juego.getCasilla(9,8);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b98ActionPerformed

    private void b99ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b99ActionPerformed
        Casilla c = juego.getCasilla(9,9);
        
        if (estadoInfo==1) {
            mostrarPanelInfo("Informacion casilla " + c.toString(), c.getInfo());
            estadoInfo = 0;
        } else if (estadoMover == 1) {
            if (juego.moverse(c, listaSup[turnoJuego])) {
                estadoMover = 0;
                narradorJuego.setText(listaNombres[turnoJuego] + " se ha movido a " + c.toString());
                actualizarPartida();
            } else {
                narradorJuego.setText(listaNombres[turnoJuego] + " no se ha podido mover a " + c.toString());
            } 
        } else if (estadoAtacar == 2) {
            if (juego.generarAtaque(listaSup[turnoJuego], armaAux, c)) {
                estadoAtacar = 0;
                narradorJuego.setText("El ataque se ha ejecutado con exito");
                actualizarPartida();
            } else {
                narradorJuego.setText("El ataque no se ha ejecutado con exito");
            }
        }
    }//GEN-LAST:event_b99ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(J_Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(J_Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(J_Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(J_Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        String [] nombres = {"Edward", "Manu", "Anass", "ChatGPT"};
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                J_Tablero tablero = new J_Tablero(nombres);
                tablero.setVisible(true);
                tablero.iniciarPartida();
            }
        });
    }
    
    public void iniciarPartida() {
        juego.asignarSupervivientesPosicionInicial(listaNombres);
        juego.generarZombisInicio();
        turnoJuego = 0;
        turnosRestantesSuperviviente = juego.getTurnosSupervivientes();
        actualizarListaSupervivientes();
        imprimirInformacionSuperviviente(); //Imprimo la información del primer superviviente justo cuando se actualiza su información
        actualizarBotones();
    }
    
    private void  actualizarPartida() {
        actualizarListaSupervivientes();
        
        siguienteAccion();
        actualizarBotones();
        imprimirInformacionSuperviviente();
        haTerminadoPartida();
    }
    
    private void haTerminadoPartida() {
        if (juego.hayAlgunSupervivienteMuerto()) {
            
        }
        if (juego.hanGanadoSupervivientes(listaNombres)) {
            
        }
    }
    
    private void actualizarListaSupervivientes() {
        for (int i=0; i<listaNombres.length; i++) {
            listaSup[i] = juego.getSuperviviente(listaNombres[i]);
        }
    }
    
    private void siguienteAccion() {
        // Cuando el ultimo superviviente gasta su ultima accion juegan los zombis
        if (turnoJuego == listaNombres.length - 1 && turnosRestantesSuperviviente == 1) { 
            juego.turnoZombis();
            juego.generarNuevoZombi();
            turnosRestantesSuperviviente = juego.getTurnosSupervivientes();
            siguienteTurnoJuego();
            juegoAnterior = juego;
        } else if (turnosRestantesSuperviviente == 1) { // Cuando un superviviente agota sus turnos, se reinicia el contador para el siguiente
            turnosRestantesSuperviviente = juego.getTurnosSupervivientes();
            siguienteTurnoJuego();
        } else {
            turnosRestantesSuperviviente--;
        }
        System.out.println(turnosRestantesSuperviviente);
    }
    
    private void mostrarPanelInfo(String titulo, String texto) {
        J_Info panel = new J_Info();
        panel.setInfo(texto);
        JOptionPane.showConfirmDialog(this, panel, titulo, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
    }
    
    private String ponerTexto(Casilla c) {
        if (c.hayAlgunSupervivienteVivo() && c.hayAlgunZombi()) {
            return "/";
        } else if (c.hayAlgunZombi()) {
            return "Z";
        } else if (c.hayAlgunSupervivienteVivo()) {
            return "S";
        } else {
            return "";
        }
    }
    
    private void siguienteTurnoJuego() {
        if (turnoJuego == listaNombres.length - 1) {  // Despues del ultimo superviviente va el primero
            turnoJuego = 0;
        } else {  // Despues de un superviviente va el siguiente
            turnoJuego++;
        }

        //imprimirInformacionSuperviviente();
    }
    
    private void imprimirInformacionSuperviviente() {
        L_NombreSuperviviente.setText(listaNombres[turnoJuego]);
        //Si no tiene mano izquierda/derecha imprimirmos "No tiene"
        if(listaSup[turnoJuego].getManoIzq() == null) {
            bManoIzq.setText("No tiene");
        } else {
            bManoIzq.setText(listaSup[turnoJuego].getManoIzq().toString());
        }

        if(listaSup[turnoJuego].getManoDer() == null) {
            bManoDer.setText("No tiene");
        } else {
            bManoDer.setText(listaSup[turnoJuego].getManoDer().toString());
        }
        
        // Mostramos el inventario del superviviente
        // Este codigo esta ligado al numero de botones que hay en la UI y al numero de huecos de inventario del superviviente (5 en este caso)
        // Ampliar o reducir este numero de huecos es tan facil como añadir o borrar un boton y su respectiva linea de codigo
        bInv1.setText("Hueco vacio");
        bInv2.setText("Hueco vacio");
        bInv3.setText("Hueco vacio");
        bInv4.setText("Hueco vacio");
        bInv5.setText("Hueco vacio");
        if (listaSup[turnoJuego].getInvSig() >= 1)      bInv1.setText(listaSup[turnoJuego].getInventario()[0].toString());
        if (listaSup[turnoJuego].getInvSig() >= 2)      bInv2.setText(listaSup[turnoJuego].getInventario()[1].toString());
        if (listaSup[turnoJuego].getInvSig() >= 3)      bInv3.setText(listaSup[turnoJuego].getInventario()[2].toString());
        if (listaSup[turnoJuego].getInvSig() >= 4)      bInv4.setText(listaSup[turnoJuego].getInventario()[3].toString());
        if (listaSup[turnoJuego].getInvSig() >= 5)      bInv5.setText(listaSup[turnoJuego].getInventario()[4].toString());

        /*if(listaSup[turnoJuego].getInventario() == null || listaSup[turnoJuego].getInventario().length == 0) {
            L_ConfirmacionInventario.setText("No tiene");
        } else {
            for(int j=0; j<listaSup[turnoJuego].getInventario().length; j++) {
                L_ConfirmacionInventario.setText("No tiene 2");
                if(listaSup[turnoJuego].getInventario()[j] != null) {
                    L_ConfirmacionInventario.setText(listaSup[turnoJuego].getInventario()[j].toString() + "\n");
                }

            }
        }*/
    }
    
    private void actualizarBotones() {
        estadoJuego.setText("Turno=" + turnoJuego + " Acciones=" + turnosRestantesSuperviviente);
        
        b00.setText(ponerTexto(juego.getCasilla(0, 0)));
        b01.setText(ponerTexto(juego.getCasilla(0, 1)));
        b02.setText(ponerTexto(juego.getCasilla(0, 2)));
        b03.setText(ponerTexto(juego.getCasilla(0, 3)));
        b04.setText(ponerTexto(juego.getCasilla(0, 4)));
        b05.setText(ponerTexto(juego.getCasilla(0, 5)));
        b06.setText(ponerTexto(juego.getCasilla(0, 6)));
        b07.setText(ponerTexto(juego.getCasilla(0, 7)));
        b08.setText(ponerTexto(juego.getCasilla(0, 8)));
        b09.setText(ponerTexto(juego.getCasilla(0, 9)));

        b10.setText(ponerTexto(juego.getCasilla(1, 0)));
        b11.setText(ponerTexto(juego.getCasilla(1, 1)));
        b12.setText(ponerTexto(juego.getCasilla(1, 2)));
        b13.setText(ponerTexto(juego.getCasilla(1, 3)));
        b14.setText(ponerTexto(juego.getCasilla(1, 4)));
        b15.setText(ponerTexto(juego.getCasilla(1, 5)));
        b16.setText(ponerTexto(juego.getCasilla(1, 6)));
        b17.setText(ponerTexto(juego.getCasilla(1, 7)));
        b18.setText(ponerTexto(juego.getCasilla(1, 8)));
        b19.setText(ponerTexto(juego.getCasilla(1, 9)));

        b20.setText(ponerTexto(juego.getCasilla(2, 0)));
        b21.setText(ponerTexto(juego.getCasilla(2, 1)));
        b22.setText(ponerTexto(juego.getCasilla(2, 2)));
        b23.setText(ponerTexto(juego.getCasilla(2, 3)));
        b24.setText(ponerTexto(juego.getCasilla(2, 4)));
        b25.setText(ponerTexto(juego.getCasilla(2, 5)));
        b26.setText(ponerTexto(juego.getCasilla(2, 6)));
        b27.setText(ponerTexto(juego.getCasilla(2, 7)));
        b28.setText(ponerTexto(juego.getCasilla(2, 8)));
        b29.setText(ponerTexto(juego.getCasilla(2, 9)));

        b30.setText(ponerTexto(juego.getCasilla(3, 0)));
        b31.setText(ponerTexto(juego.getCasilla(3, 1)));
        b32.setText(ponerTexto(juego.getCasilla(3, 2)));
        b33.setText(ponerTexto(juego.getCasilla(3, 3)));
        b34.setText(ponerTexto(juego.getCasilla(3, 4)));
        b35.setText(ponerTexto(juego.getCasilla(3, 5)));
        b36.setText(ponerTexto(juego.getCasilla(3, 6)));
        b37.setText(ponerTexto(juego.getCasilla(3, 7)));
        b38.setText(ponerTexto(juego.getCasilla(3, 8)));
        b39.setText(ponerTexto(juego.getCasilla(3, 9)));

        b40.setText(ponerTexto(juego.getCasilla(4, 0)));
        b41.setText(ponerTexto(juego.getCasilla(4, 1)));
        b42.setText(ponerTexto(juego.getCasilla(4, 2)));
        b43.setText(ponerTexto(juego.getCasilla(4, 3)));
        b44.setText(ponerTexto(juego.getCasilla(4, 4)));
        b45.setText(ponerTexto(juego.getCasilla(4, 5)));
        b46.setText(ponerTexto(juego.getCasilla(4, 6)));
        b47.setText(ponerTexto(juego.getCasilla(4, 7)));
        b48.setText(ponerTexto(juego.getCasilla(4, 8)));
        b49.setText(ponerTexto(juego.getCasilla(4, 9)));

        b50.setText(ponerTexto(juego.getCasilla(5, 0)));
        b51.setText(ponerTexto(juego.getCasilla(5, 1)));
        b52.setText(ponerTexto(juego.getCasilla(5, 2)));
        b53.setText(ponerTexto(juego.getCasilla(5, 3)));
        b54.setText(ponerTexto(juego.getCasilla(5, 4)));
        b55.setText(ponerTexto(juego.getCasilla(5, 5)));
        b56.setText(ponerTexto(juego.getCasilla(5, 6)));
        b57.setText(ponerTexto(juego.getCasilla(5, 7)));
        b58.setText(ponerTexto(juego.getCasilla(5, 8)));
        b59.setText(ponerTexto(juego.getCasilla(5, 9)));

        b60.setText(ponerTexto(juego.getCasilla(6, 0)));
        b61.setText(ponerTexto(juego.getCasilla(6, 1)));
        b62.setText(ponerTexto(juego.getCasilla(6, 2)));
        b63.setText(ponerTexto(juego.getCasilla(6, 3)));
        b64.setText(ponerTexto(juego.getCasilla(6, 4)));
        b65.setText(ponerTexto(juego.getCasilla(6, 5)));
        b66.setText(ponerTexto(juego.getCasilla(6, 6)));
        b67.setText(ponerTexto(juego.getCasilla(6, 7)));
        b68.setText(ponerTexto(juego.getCasilla(6, 8)));
        b69.setText(ponerTexto(juego.getCasilla(6, 9)));

        b70.setText(ponerTexto(juego.getCasilla(7, 0)));
        b71.setText(ponerTexto(juego.getCasilla(7, 1)));
        b72.setText(ponerTexto(juego.getCasilla(7, 2)));
        b73.setText(ponerTexto(juego.getCasilla(7, 3)));
        b74.setText(ponerTexto(juego.getCasilla(7, 4)));
        b75.setText(ponerTexto(juego.getCasilla(7, 5)));
        b76.setText(ponerTexto(juego.getCasilla(7, 6)));
        b77.setText(ponerTexto(juego.getCasilla(7, 7)));
        b78.setText(ponerTexto(juego.getCasilla(7, 8)));
        b79.setText(ponerTexto(juego.getCasilla(7, 9)));

        b80.setText(ponerTexto(juego.getCasilla(8, 0)));
        b81.setText(ponerTexto(juego.getCasilla(8, 1)));
        b82.setText(ponerTexto(juego.getCasilla(8, 2)));
        b83.setText(ponerTexto(juego.getCasilla(8, 3)));
        b84.setText(ponerTexto(juego.getCasilla(8, 4)));
        b85.setText(ponerTexto(juego.getCasilla(8, 5)));
        b86.setText(ponerTexto(juego.getCasilla(8, 6)));
        b87.setText(ponerTexto(juego.getCasilla(8, 7)));
        b88.setText(ponerTexto(juego.getCasilla(8, 8)));
        b89.setText(ponerTexto(juego.getCasilla(8, 9)));

        b90.setText(ponerTexto(juego.getCasilla(9, 0)));
        b91.setText(ponerTexto(juego.getCasilla(9, 1)));
        b92.setText(ponerTexto(juego.getCasilla(9, 2)));
        b93.setText(ponerTexto(juego.getCasilla(9, 3)));
        b94.setText(ponerTexto(juego.getCasilla(9, 4)));
        b95.setText(ponerTexto(juego.getCasilla(9, 5)));
        b96.setText(ponerTexto(juego.getCasilla(9, 6)));
        b97.setText(ponerTexto(juego.getCasilla(9, 7)));
        b98.setText(ponerTexto(juego.getCasilla(9, 8)));
        b99.setText(ponerTexto(juego.getCasilla(9, 9)));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_Salir;
    private javax.swing.JLabel L_Inventario;
    private javax.swing.JLabel L_LogoURJC;
    private javax.swing.JLabel L_ManoDerecha;
    private javax.swing.JLabel L_ManoIzquierda;
    private javax.swing.JLabel L_NombreSuperviviente;
    private javax.swing.JPanel P_MostrarInformacionSuperviviente;
    private javax.swing.JButton b00;
    private javax.swing.JButton b01;
    private javax.swing.JButton b02;
    private javax.swing.JButton b03;
    private javax.swing.JButton b04;
    private javax.swing.JButton b05;
    private javax.swing.JButton b06;
    private javax.swing.JButton b07;
    private javax.swing.JButton b08;
    private javax.swing.JButton b09;
    private javax.swing.JButton b10;
    private javax.swing.JButton b11;
    private javax.swing.JButton b12;
    private javax.swing.JButton b13;
    private javax.swing.JButton b14;
    private javax.swing.JButton b15;
    private javax.swing.JButton b16;
    private javax.swing.JButton b17;
    private javax.swing.JButton b18;
    private javax.swing.JButton b19;
    private javax.swing.JButton b20;
    private javax.swing.JButton b21;
    private javax.swing.JButton b22;
    private javax.swing.JButton b23;
    private javax.swing.JButton b24;
    private javax.swing.JButton b25;
    private javax.swing.JButton b26;
    private javax.swing.JButton b27;
    private javax.swing.JButton b28;
    private javax.swing.JButton b29;
    private javax.swing.JButton b30;
    private javax.swing.JButton b31;
    private javax.swing.JButton b32;
    private javax.swing.JButton b33;
    private javax.swing.JButton b34;
    private javax.swing.JButton b35;
    private javax.swing.JButton b36;
    private javax.swing.JButton b37;
    private javax.swing.JButton b38;
    private javax.swing.JButton b39;
    private javax.swing.JButton b40;
    private javax.swing.JButton b41;
    private javax.swing.JButton b42;
    private javax.swing.JButton b43;
    private javax.swing.JButton b44;
    private javax.swing.JButton b45;
    private javax.swing.JButton b46;
    private javax.swing.JButton b47;
    private javax.swing.JButton b48;
    private javax.swing.JButton b49;
    private javax.swing.JButton b50;
    private javax.swing.JButton b51;
    private javax.swing.JButton b52;
    private javax.swing.JButton b53;
    private javax.swing.JButton b54;
    private javax.swing.JButton b55;
    private javax.swing.JButton b56;
    private javax.swing.JButton b57;
    private javax.swing.JButton b58;
    private javax.swing.JButton b59;
    private javax.swing.JButton b60;
    private javax.swing.JButton b61;
    private javax.swing.JButton b62;
    private javax.swing.JButton b63;
    private javax.swing.JButton b64;
    private javax.swing.JButton b65;
    private javax.swing.JButton b66;
    private javax.swing.JButton b67;
    private javax.swing.JButton b68;
    private javax.swing.JButton b69;
    private javax.swing.JButton b70;
    private javax.swing.JButton b71;
    private javax.swing.JButton b72;
    private javax.swing.JButton b73;
    private javax.swing.JButton b74;
    private javax.swing.JButton b75;
    private javax.swing.JButton b76;
    private javax.swing.JButton b77;
    private javax.swing.JButton b78;
    private javax.swing.JButton b79;
    private javax.swing.JButton b80;
    private javax.swing.JButton b81;
    private javax.swing.JButton b82;
    private javax.swing.JButton b83;
    private javax.swing.JButton b84;
    private javax.swing.JButton b85;
    private javax.swing.JButton b86;
    private javax.swing.JButton b87;
    private javax.swing.JButton b88;
    private javax.swing.JButton b89;
    private javax.swing.JButton b90;
    private javax.swing.JButton b91;
    private javax.swing.JButton b92;
    private javax.swing.JButton b93;
    private javax.swing.JButton b94;
    private javax.swing.JButton b95;
    private javax.swing.JButton b96;
    private javax.swing.JButton b97;
    private javax.swing.JButton b98;
    private javax.swing.JButton b99;
    private javax.swing.JButton bAtaque;
    private javax.swing.JButton bBuscarEquipo;
    private javax.swing.JButton bCambiarArma;
    private javax.swing.JButton bInfo;
    private javax.swing.JButton bInv1;
    private javax.swing.JButton bInv2;
    private javax.swing.JButton bInv3;
    private javax.swing.JButton bInv4;
    private javax.swing.JButton bInv5;
    private javax.swing.JButton bManoDer;
    private javax.swing.JButton bManoIzq;
    private javax.swing.JButton bMoverse;
    private javax.swing.JButton bNada;
    private javax.swing.JLabel estadoJuego;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel narradorJuego;
    private javax.swing.JLabel nombreSuperviviente1;
    // End of variables declaration//GEN-END:variables
}
